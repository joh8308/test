{"version":3,"sources":["meteor://ðŸ’»app/packages/force-ssl/force_ssl_both.js","meteor://ðŸ’»app/packages/force-ssl/force_ssl_server.js"],"names":["Object","assign","Meteor","absoluteUrl","defaultOptions","secure","isLocalConnection","isSslConnection","module","watch","require","v","url","Npm","httpServer","WebApp","oldHttpServerListeners","listeners","slice","removeAllListeners","addListener","req","res","host","parse","hostname","replace","writeHead","end","args","arguments","forEach","oldListener","apply"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAcC,OAAOC,WAAP,CAAmBC,cAAjC,EAAiD;AAAEC,UAAQ;AAAV,CAAjD,2G;;;;;;;;;;;ACAA,IAAIC,0BAAJ;AAAA,IAAsBC,wBAAtB;AAAsCC,OAAOC,KAAP,CAAaC,QAAQ,yBAAR,CAAb,EAAgD;AAACJ,mBAAD,YAAmBK,CAAnB,EAAqB;AAACL,wBAAkBK,CAAlB;AAAoB,GAA1C;AAA2CJ,iBAA3C,YAA2DI,CAA3D,EAA6D;AAACJ,sBAAgBI,CAAhB;AAAkB;AAAhF,CAAhD,EAAkI,CAAlI;;AAAtC,IAAIC,MAAMC,IAAIH,OAAJ,CAAY,KAAZ,CAAV;;AAGA;AACA;AACA;AACA;AACA;AAEA,IAAII,aAAaC,OAAOD,UAAxB;AACA,IAAIE,yBAAyBF,WAAWG,SAAX,CAAqB,SAArB,EAAgCC,KAAhC,CAAsC,CAAtC,CAA7B;AACAJ,WAAWK,kBAAX,CAA8B,SAA9B;AACAL,WAAWM,WAAX,CAAuB,SAAvB,EAAkC,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAI,CAAChB,kBAAkBe,GAAlB,CAAD,IAA2B,CAACd,gBAAgBc,GAAhB,CAAhC,EAAsD;AACpD;AAEA,QAAIE,OAAOX,IAAIY,KAAJ,CAAUtB,OAAOC,WAAP,EAAV,EAAgCsB,QAA3C,CAHoD,CAKpD;AACA;;AACAF,WAAOA,KAAKG,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AAEAJ,QAAIK,SAAJ,CAAc,GAAd,EAAmB;AACjB,kBAAY,aAAaJ,IAAb,GAAoBF,IAAIT,GADnB;AAEjB,qCAA+B;AAFd,KAAnB;AAIAU,QAAIM,GAAJ;AACA;AACD,GAzBmD,CA2BpD;;;AACA,MAAIC,OAAOC,SAAX;AACAd,yBAAuBe,OAAvB,CAA+B,UAACC,WAAD,EAAiB;AAC9CA,gBAAYC,KAAZ,CAAkBnB,UAAlB,EAA8Be,IAA9B;AACD,GAFD;AAGD,CAhCD,E,CAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6G","file":"/packages/force-ssl.js","sourcesContent":["Object.assign(Meteor.absoluteUrl.defaultOptions, { secure: true });\n","var url = Npm.require(\"url\");\nimport { isLocalConnection, isSslConnection } from 'meteor/force-ssl-common';\n\n// Unfortunately we can't use a connect middleware here since\n// sockjs installs itself prior to all existing listeners\n// (meaning prior to any connect middlewares) so we need to take\n// an approach similar to overshadowListeners in\n// https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n\nvar httpServer = WebApp.httpServer;\nvar oldHttpServerListeners = httpServer.listeners('request').slice(0);\nhttpServer.removeAllListeners('request');\nhttpServer.addListener('request', function (req, res) {\n\n  // allow connections if they have been handled w/ ssl already\n  // (either by us or by a proxy) OR the connection is entirely over\n  // localhost (development mode).\n  //\n  // Note: someone could trick us into serving over non-ssl by setting\n  // x-forwarded-for, x-forwarded-proto, forwarded, etc. Not much we can do\n  // there if we still want to operate behind proxies.\n\n  if (!isLocalConnection(req) && !isSslConnection(req)) {\n    // connection is not cool. send a 302 redirect!\n\n    var host = url.parse(Meteor.absoluteUrl()).hostname;\n\n    // strip off the port number. If we went to a URL with a custom\n    // port, we don't know what the custom SSL port is anyway.\n    host = host.replace(/:\\d+$/, '');\n\n    res.writeHead(302, {\n      'Location': 'https://' + host + req.url,\n      'Access-Control-Allow-Origin': '*'\n    });\n    res.end();\n    return;\n  }\n\n  // connection is OK. Proceed normally.\n  var args = arguments;\n  oldHttpServerListeners.forEach((oldListener) => {\n    oldListener.apply(httpServer, args);\n  });\n});\n\n\n// NOTE: this doesn't handle websockets!\n//\n// Websockets come in via the 'upgrade' request. We can override this,\n// however the problem is we're not sure if the websocket is actually\n// encrypted. We don't get x-forwarded-for, x-forwarded-proto, forwarded, etc.\n// on websockets. It's possible the 'sec-websocket-origin' header does\n// what we want, but that's not clear.\n//\n// For now, this package allows raw unencrypted DDP connections over\n// websockets.\n"]}