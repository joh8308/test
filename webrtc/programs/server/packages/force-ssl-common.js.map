{"version":3,"sources":["meteor://ðŸ’»app/packages/force-ssl-common/force_ssl_common.js"],"names":["module","export","isLocalConnection","isSslConnection","forwarded","watch","require","v","req","localhostRegexp","request","Object","create","connection","assign","remoteAddress","socket","forwardedParams","isLocal","keys","for","forEach","forKey","test","pair","proto","indexOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,qBAAkB;AAAA,WAAIA,iBAAJ;AAAA,GAAnB;AAAyCC,mBAAgB;AAAA,WAAIA,eAAJ;AAAA;AAAzD,CAAd;AAA6F,IAAIC,kBAAJ;AAAcJ,OAAOK,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAAA,uBAASC,CAAT,EAAW;AAACH,gBAAUG,CAAV;AAAY;AAAxB,CAAvC,EAAiE,CAAjE;;AAE3G;AACA;AACA;AACA,IAAML,oBAAoB,UAACM,GAAD,EAAS;AACjC,MAAMC,kBAAkB,kCAAxB;AACA,MAAMC,UAAUC,OAAOC,MAAP,CAAcJ,GAAd,CAAhB;AACAE,UAAQG,UAAR,GAAqBF,OAAOG,MAAP,CACnB,EADmB,EAEnBN,IAAIK,UAFe,EAGnB;AAAEE,mBAAeP,IAAIK,UAAJ,CAAeE,aAAf,IAAgCP,IAAIQ,MAAJ,CAAWD;AAA5D,GAHmB,CAArB;AAKA,MAAME,kBAAkBb,UAAUM,OAAV,CAAxB;AACA,MAAIQ,UAAU,IAAd;AACAP,SAAOQ,IAAP,CAAYF,gBAAgBG,GAA5B,EAAiCC,OAAjC,CAAyC,UAACC,MAAD,EAAY;AACnD,QAAI,CAACb,gBAAgBc,IAAhB,CAAqBD,MAArB,CAAL,EAAmC;AACjCJ,gBAAU,KAAV;AACD;AACF,GAJD;AAKA,SAAOA,OAAP;AACD,CAhBD,C,CAkBA;AACA;;;AACA,IAAMf,kBAAkB,UAACK,GAAD,EAAS;AAC/B,MAAMS,kBAAkBb,UAAUI,GAAV,CAAxB;AACA,SAAOA,IAAIK,UAAJ,CAAeW,IAAf,IACAP,gBAAgBQ,KAAhB,IAAyBR,gBAAgBQ,KAAhB,CAAsBC,OAAtB,CAA8B,OAA9B,MAA2C,CAAC,CAD5E;AAED,CAJD,4G","file":"/packages/force-ssl-common.js","sourcesContent":["import forwarded from 'forwarded-http';\n\n// Determine if the connection is only over localhost. Both we\n// received it on localhost, and all proxies involved received on\n// localhost (supports \"forwarded\" and \"x-forwarded-for\").\nconst isLocalConnection = (req) => {\n  const localhostRegexp = /^\\s*(127\\.0\\.0\\.1|\\[?::1\\]?)\\s*$/;\n  const request = Object.create(req);\n  request.connection = Object.assign(\n    {},\n    req.connection,\n    { remoteAddress: req.connection.remoteAddress || req.socket.remoteAddress }\n  );\n  const forwardedParams = forwarded(request);\n  let isLocal = true;\n  Object.keys(forwardedParams.for).forEach((forKey) => {\n    if (!localhostRegexp.test(forKey)) {\n      isLocal = false;\n    }\n  });\n  return isLocal;\n};\n\n// Determine if the connection was over SSL at any point. Either we\n// received it as SSL, or a proxy did and translated it for us.\nconst isSslConnection = (req) => {\n  const forwardedParams = forwarded(req);\n  return req.connection.pair\n      || forwardedParams.proto && forwardedParams.proto.indexOf('https') !== -1;\n};\n\nexport { isLocalConnection, isSslConnection };\n"]}